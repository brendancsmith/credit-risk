# Generated by CodiumAI

import contextlib
import pytest

class TestResample:

    # Resampling a balanced dataset
    def test_resample_balanced_dataset(self):
        import pandas as pd
        from sklearn.datasets import make_classification
        from src.training import resample

        # Create a balanced dataset
        X, y = make_classification(n_samples=100, n_features=20, n_classes=2, weights=[0.5, 0.5], random_state=42)
        df = pd.DataFrame(X)
        df['loan_status'] = y

        X_resampled, y_resampled = resample(df)

        assert len(X_resampled) == len(y_resampled)
        assert len(X_resampled) > 0

        # Check that the distribution is even
        assert y_resampled.value_counts()[0] == y_resampled.value_counts()[1]

    # Resampling an imbalanced dataset
    def test_resample_imbalanced_dataset(self):
        import pandas as pd
        from sklearn.datasets import make_classification
        from src.training import resample

        # Create an imbalanced dataset
        X, y = make_classification(n_samples=1000, n_features=20, n_classes=2, weights=[0.9, 0.1], random_state=42)
        df = pd.DataFrame(X)
        df['loan_status'] = y

        X_resampled, y_resampled = resample(df)

        assert len(X_resampled) == len(y_resampled)
        assert len(X_resampled) > 0

        # Check that the distribution is even
        assert y_resampled.value_counts()[0] == y_resampled.value_counts()[1]

    # Dataframe without 'loan_status' column
    def test_resample_no_loan_status_column(self):
        import pandas as pd
        from src.training import resample

        # Create a dataframe without 'loan_status' column
        data = {'feature1': [1, 2, 3], 'feature2': [4, 5, 6]}
        df = pd.DataFrame(data)

        with contextlib.suppress(KeyError):
            resample(df)
            assert False, "Expected KeyError"
