# Generated by CodiumAI
from src.feature_engineering import drop_corr_pairs, index_categories, onehot_encoding, frequency_encoding, new_features
import numpy as np


import pytest

class TestDropCorrPairs:

    # Drops features with correlation greater than 0.8
    def test_drops_high_corr_features(self):
        import pandas as pd
        import numpy as np
    
        import numpy as np
        import numpy as np
        data = {
            'A': [1, 2, 3, 4, 5],
            'B': [1, 2, 3, 4, 5],
            'C': [5, 4, 3, 2, 1]
        }
        df = pd.DataFrame(data)
        corr_matrix = df.corr()
    
        result_df = drop_corr_pairs(df, corr_matrix)
    
        assert 'A' not in result_df.columns or 'B' not in result_df.columns

    # DataFrame with all features having correlation greater than 0.8
    def test_all_features_high_corr(self):
        import pandas as pd
        import numpy as np
    
        data = {
            'A': [1, 2, 3, 4, 5],
            'B': [1, 2, 3, 4, 5],
            'C': [1, 2, 3, 4, 5]
        }
        df = pd.DataFrame(data)
        corr_matrix = df.corr()
    
        result_df = drop_corr_pairs(df, corr_matrix)
    
        assert len(result_df.columns) == 1
class TestIndexCategories:

    def test_index_categories(self):
        import pandas as pd
        data = {
            'target': ['cat', 'dog', 'cat', 'bird'],
            'feature': [1, 2, 3, 4]
        }
        df = pd.DataFrame(data)
        result_df = index_categories(df, 'target')
        assert result_df['target'].tolist() == [1, 2, 1, 0]

    def test_index_categories_with_categories(self):
        import pandas as pd
        data = {
            'target': ['cat', 'dog', 'cat', 'bird'],
            'feature': [1, 2, 3, 4]
        }
        df = pd.DataFrame(data)
        result_df = index_categories(df, 'target', categories=['dog', 'cat'])
        expected = [1.0, 0.0, 1.0, np.nan]
        result = result_df['target'].tolist()
        for res, exp in zip(result, expected):
            if np.isnan(exp):
                assert np.isnan(res)
            else:
                assert res == exp

class TestOneHotEncoding:

    def test_onehot_encoding(self):
        import pandas as pd
        data = {
            'color': ['red', 'blue', 'green'],
            'value': [1, 2, 3]
        }
        df = pd.DataFrame(data)
        result_df = onehot_encoding(df, cols=['color'])
        assert 'color_red' in result_df.columns
        assert 'color_blue' in result_df.columns
        assert 'color_green' in result_df.columns

class TestFrequencyEncoding:

    def test_frequency_encoding(self):
        import pandas as pd
        data = {
            'color': ['red', 'blue', 'red', 'green', 'blue', 'blue'],
            'value': [1, 2, 3, 4, 5, 6]
        }
        df = pd.DataFrame(data)
        result_df = frequency_encoding(df, cols=['color'])
        assert result_df['color'].tolist() == [1/3, 1/2, 1/3, 1/6, 1/2, 1/2]

class TestNewFeatures:

    def test_new_features(self):
        import pandas as pd
        data = {
            'zip_code': ['12345', '67890', '54321']
        }
        df = pd.DataFrame(data)
        result_df = new_features(df)
        assert result_df['zip_code'].tolist() == [12345.0, 67890.0, 54321.0]
